import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import networkx as nx
from collections import Counter, defaultdict
import io
import base64
import time
import random
from datetime import timedelta

# Imports de Process Mining (PM4PY)
import pm4py
from pm4py.objects.conversion.log import converter as log_converter
from pm4py.objects.conversion.process_tree import converter as pt_converter
from pm4py.visualization.petri_net import visualizer as pn_visualizer
from pm4py.visualization.dfg import visualizer as dfg_visualizer
from pm4py.algo.discovery.dfg import algorithm as dfg_discovery
from pm4py.algo.discovery.inductive import algorithm as inductive_miner
from pm4py.algo.discovery.heuristics import algorithm as heuristics_miner
from pm4py.algo.evaluation.replay_fitness import algorithm as replay_fitness_evaluator
from pm4py.algo.evaluation.precision import algorithm as precision_evaluator
from pm4py.algo.evaluation.generalization import algorithm as generalization_evaluator
from pm4py.algo.evaluation.simplicity import algorithm as simplicity_evaluator
from pm4py.algo.filtering.log.variants import variants_filter
from pm4py.algo.conformance.alignments.petri_net import algorithm as alignments_miner

# Imports para An√°lise Explorat√≥ria (EDA)
import missingno as msno

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA E ESTILO ---
st.set_page_config(
    page_title="Transforma√ß√£o Anal√≠tica - Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- 2. GEST√ÉO DE ESTADO E AUTENTICA√á√ÉO ---

# Usu√°rios fict√≠cios
USERS = {"admin": "admin", "analista": "analise"}

def authenticate(username, password):
    return USERS.get(username) == password

def login_page():
    st.image("logo.png", width=250)
    st.title("Acesso ao Sistema de An√°lise")
    username = st.text_input("Nome de Usu√°rio")
    password = st.text_input("Senha", type="password")

    if st.button("Entrar", use_container_width=True):
        if authenticate(username, password):
            st.session_state.authenticated = True
            st.session_state.user_name = username
            st.session_state.current_page = "Dashboard"
            st.rerun()
        else:
            st.error("Nome de usu√°rio ou senha incorretos.")

# --- 3. FUN√á√ïES DE CARREGAMENTO E PR√â-PROCESSAMENTO ---

@st.cache_data
def load_data():
    try:
        # Carregar os 5 CSVs
        df_projects = pd.read_csv('projects.csv')
        df_tasks = pd.read_csv('tasks.csv')
        df_resources = pd.read_csv('resources.csv')
        df_allocations = pd.read_csv('resource_allocations.csv')
        df_dependencies = pd.read_csv('dependencies.csv')
        
        # Convers√£o de Datas
        df_projects['start_date'] = pd.to_datetime(df_projects['start_date'])
        df_projects['end_date'] = pd.to_datetime(df_projects['end_date'])
        df_tasks['start_date'] = pd.to_datetime(df_tasks['start_date'])
        df_tasks['end_date'] = pd.to_datetime(df_tasks['end_date'])
        df_allocations['allocation_date'] = pd.to_datetime(df_allocations['allocation_date'])
        
        return df_projects, df_tasks, df_resources, df_allocations, df_dependencies
    
    except FileNotFoundError as e:
        st.error(f"Erro ao carregar ficheiro: {e}. Certifique-se de que os 5 CSVs est√£o na pasta.")
        return None, None, None, None, None

@st.cache_data
def run_pre_mining_analysis(df_projects, df_tasks, df_resources, df_allocations):
    
    # 1. Merge de Dados para An√°lise Completa
    df_full_context = df_allocations.merge(df_tasks, on=['task_id', 'project_id'], how='left')
    df_full_context = df_full_context.merge(df_projects, on='project_id', how='left')
    df_full_context = df_full_context.merge(df_resources, on='resource_id', how='left')
    
    # 2. C√°lculo do Custo Real por Aloca√ß√£o
    df_full_context['cost_of_work'] = df_full_context['hours_worked'] * df_full_context['cost_per_hour']
    
    # 3. Agrega√ß√£o de Custos e Cria√ß√£o de KPIs no n√≠vel do Projeto
    project_costs = df_full_context.groupby('project_id')['cost_of_work'].sum().reset_index()
    project_costs.rename(columns={'cost_of_work': 'real_process_cost'}, inplace=True)
    
    df_projects = df_projects.merge(project_costs, on='project_id', how='left')
    
    # 4. C√°lculo de Desvios (Performance & Custos)
    df_projects['duration_diff_days'] = (df_projects['end_date'] - df_projects['planned_end_date']).dt.days
    df_projects['cost_diff'] = df_projects['real_process_cost'] - df_projects['budget_impact'] # budget_impact = Or√ßamento (Baseline)
    
    # 5. C√°lculo do Esfor√ßo Total por Tarefa (Ajuste Cir√∫rgico AQUI)
    # TAREFAS: Colunas de esfor√ßo agregadas (Cr√©dito Habita√ß√£o) em vez de detalhe (IT)
    df_tasks['estimated_effort_total'] = df_tasks['estimated_effort']
    df_tasks['actual_effort_total'] = df_tasks['actual_effort']
    
    # C√°lculo de Vari√¢ncia de Esfor√ßo
    df_tasks['effort_variance'] = df_tasks['actual_effort_total'] - df_tasks['estimated_effort_total']
    
    # 6. Extra√ß√£o do Tipo de Projeto (Ajuste Cir√∫rgico AQUI)
    # PROJETOS: Novo esquema utiliza 'path_name' para categoriza√ß√£o
    df_projects['project_type'] = df_projects['path_name']
    
    # 7. Cria√ß√£o do Log de Eventos para Process Mining (PM4PY)
    # Colunas de log para PM4PY
    log_df = df_full_context[[
        'project_id', 
        'task_name', 
        'allocation_date', 
        'resource_name'
    ]].copy()

    # Renomear para o padr√£o PM4PY
    log_df.rename(columns={
        'project_id': 'case:concept:name',
        'task_name': 'concept:name',
        'allocation_date': 'time:timestamp',
        'resource_name': 'org:resource'
    }, inplace=True)
    
    # Garantir que o log est√° ordenado
    log_df = log_df.sort_values(by=['case:concept:name', 'time:timestamp'])
    
    event_log_pm4py = pm4py.convert_to_event_log(log_df)
    
    return df_projects, df_tasks, df_resources, df_allocations, df_full_context, event_log_pm4py

# --- 4. FUN√á√ïES DE VISUALIZA√á√ÉO ---

def plot_kpi_card(title, value, unit="", delta=None):
    """Cria um cart√£o de KPI simples."""
    st.metric(label=title, value=f"{value}{unit}", delta=delta)

def plot_process_mining_viz(event_log, title, visualizer_func, discovery_algo):
    """Gera e exibe visualiza√ß√µes de Process Mining."""
    try:
        st.subheader(title)
        
        # 1. Descoberta (e.g., DFG, Petri Net)
        if visualizer_func == dfg_visualizer:
            dfg = discovery_algo.apply(event_log)
            gviz = visualizer_func.apply(dfg, log=event_log, variant=visualizer_func.Variants.FREQUENCY)
        elif visualizer_func == pn_visualizer:
            process_tree = discovery_algo.apply(event_log)
            net, initial_marking, final_marking = pt_converter.apply(process_tree)
            gviz = visualizer_func.apply(net, initial_marking, final_marking, variant=visualizer_func.Variants.FREQUENCY)
        else:
            return

        # 2. Renderiza√ß√£o
        st.graphviz_chart(gviz.source, use_container_width=True)
        
        # 3. M√©tricas de Conformance (Apenas para Petri Net)
        if visualizer_func == pn_visualizer:
            fitness = replay_fitness_evaluator.apply(event_log, net, initial_marking, final_marking, variant=alignments_miner.Variants.VERSION_STATE_EQUALS_ALWAYS)
            st.info(f"M√©tricas do Modelo ({discovery_algo.__name__.split('.')[-1]}):")
            col1, col2 = st.columns(2)
            col1.metric("Fitness", f"{fitness['average_trace_fitness']:.2f}", help="Mede qu√£o bem o log de eventos corresponde ao modelo (Net).")
            col2.metric("Simplicidade", f"{simplicity_evaluator.apply(net):.2f}", help="Mede a complexidade estrutural do modelo (Net).")

    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel gerar a visualiza√ß√£o {title}. (Erro: {e})")

# --- 5. LAYOUT DA P√ÅGINA (DASHBOARD) ---

def dashboard_page():
    st.title("üèõÔ∏è Dashboard de An√°lise de Processos")

    df_projects, df_tasks, df_resources, df_allocations, df_dependencies = load_data()
    
    if df_projects is None:
        return
        
    df_projects, df_tasks, df_resources, df_allocations, df_full_context, event_log_pm4py = run_pre_mining_analysis(
        df_projects, df_tasks, df_resources, df_allocations
    )
    
    # --- FILTROS ---
    st.sidebar.markdown("## ‚öôÔ∏è Filtros Anal√≠ticos")
    
    project_types = df_projects['project_type'].unique()
    selected_types = st.sidebar.multiselect("Tipo de Processo (Path)", project_types, default=project_types)
    
    resource_types = df_resources['resource_type'].unique()
    selected_resources = st.sidebar.multiselect("Tipo de Recurso", resource_types, default=resource_types)

    # Filtragem de Dados
    df_projects_filtered = df_projects[df_projects['project_type'].isin(selected_types)]
    
    # Filtro de recursos impacta as aloca√ß√µes/custos
    filtered_resource_ids = df_resources[df_resources['resource_type'].isin(selected_resources)]['resource_id'].tolist()
    df_allocations_filtered = df_full_context[
        df_full_context['project_id'].isin(df_projects_filtered['project_id']) &
        df_full_context['resource_id'].isin(filtered_resource_ids)
    ]
    
    # ------------------------------------
    
    # --- 5.1. SEC√á√ÉO 1: KPIs SUM√ÅRIOS ---
    st.header("Sum√°rio Executivo e KPIs de Performance")
    
    total_projects = len(df_projects_filtered)
    total_cost = df_allocations_filtered['cost_of_work'].sum() / 1000
    avg_duration = df_projects_filtered['total_duration_days'].mean()
    
    # KPI de Desvio de Dura√ß√£o (Baseline: 31 dias)
    projects_on_time = df_projects_filtered[df_projects_filtered['duration_diff_days'] <= 0]
    percent_on_time = (len(projects_on_time) / total_projects) * 100 if total_projects else 0
    
    # KPI de Desvio de Custo
    avg_cost_diff = df_projects_filtered['cost_diff'].mean()
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        plot_kpi_card("Total de Dossiers", total_projects, unit="")
    with col2:
        plot_kpi_card("Custo Total (K‚Ç¨)", f"{total_cost:,.0f}", unit="K‚Ç¨")
    with col3:
        plot_kpi_card("Dura√ß√£o M√©dia (Dias)", f"{avg_duration:.1f}", unit=" dias")
    with col4:
        plot_kpi_card("% Dentro do Prazo", f"{percent_on_time:.1f}", unit="%", delta=f"{avg_cost_diff:,.0f}‚Ç¨ (Desvio Custo M√©dio)")

    # --- 5.2. SEC√á√ÉO 2: MATRIZ DE PERFORMANCE ---
    st.header("Matriz de Performance (Custo vs. Dura√ß√£o)")
    
    df_scatter = df_projects_filtered.groupby('project_id').agg(
        avg_cost_diff=('cost_diff', 'first'),
        total_duration=('total_duration_days', 'first'),
        status=('project_status', 'first'),
        type=('project_type', 'first')
    ).reset_index()

    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(
        x='total_duration', 
        y='avg_cost_diff', 
        hue='status', 
        size='avg_cost_diff', 
        data=df_scatter, 
        palette={'Aprovado': 'g', 'Recusado': 'r', 'Conclu√≠da': 'b'},
        ax=ax
    )
    ax.axhline(0, color='grey', linestyle='--', linewidth=0.8)
    ax.set_title('Desvio de Custo vs. Dura√ß√£o Total por Dossier')
    ax.set_xlabel('Dura√ß√£o Total (Dias √öteis)')
    ax.set_ylabel('Desvio de Custo (Custo Real - Or√ßamento) [‚Ç¨]')
    st.pyplot(fig)

    # --- 5.3. SEC√á√ÉO 3: AN√ÅLISE DE RECURSOS E REWORK ---
    st.header("An√°lise de Carga de Trabalho e Rework")

    col1, col2 = st.columns(2)
    
    # Gr√°fico 1: Carga de Trabalho por Recurso
    with col1:
        st.subheader("Carga de Trabalho por Tipo de Recurso")
        df_resource_load = df_allocations_filtered.groupby('resource_type')['hours_worked'].sum().sort_values(ascending=False).reset_index()
        
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.barplot(x='hours_worked', y='resource_type', data=df_resource_load, ax=ax, palette='viridis')
        ax.set_title('Total de Horas Trabalhadas por Tipo de Recurso')
        ax.set_xlabel('Horas Trabalhadas (H)')
        ax.set_ylabel('')
        st.pyplot(fig)

    # Gr√°fico 2: Esfor√ßo de Rework por Tarefa
    with col2:
        st.subheader("Vari√¢ncia M√©dia de Esfor√ßo por Tarefa")
        # Filtra tarefas com rework (actual_effort > estimated_effort)
        df_rework = df_tasks[df_tasks['effort_variance'] > 0]
        df_rework_summary = df_rework.groupby('task_name')['effort_variance'].mean().sort_values(ascending=False).reset_index()
        
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.barplot(x='effort_variance', y='task_name', data=df_rework_summary.head(10), ax=ax, palette='inferno')
        ax.set_title('Vari√¢ncia M√©dia de Esfor√ßo por Tarefa (Rework)')
        ax.set_xlabel('M√©dia do Desvio de Esfor√ßo (Dias √öteis)')
        ax.set_ylabel('')
        st.pyplot(fig)

    # --- 5.4. SEC√á√ÉO 4: PROCESS MINING ---
    st.header("Process Mining e Descoberta de Fluxo")

    mining_approach = st.selectbox(
        "Selecione o Algoritmo de Descoberta",
        ["Gr√°fico de Fluxo de Desempenho (DFG)", "Rede de Petri (Inductive Miner)", "Rede de Petri (Heuristics Miner)"]
    )
    
    # 4.1. Filtrar Log para PM (apenas projetos vis√≠veis no filtro)
    case_ids_filtered = df_projects_filtered['project_id'].astype(str).tolist()
    
    # Filtragem do Log de Eventos
    filtered_log = pm4py.filter_log(lambda trace: trace.attributes['concept:name'] in case_ids_filtered, event_log_pm4py)
    
    if mining_approach == "Gr√°fico de Fluxo de Desempenho (DFG)":
        plot_process_mining_viz(filtered_log, "Descoberta DFG (Performance)", dfg_visualizer, dfg_discovery)
        
    elif mining_approach == "Rede de Petri (Inductive Miner)":
        plot_process_mining_viz(filtered_log, "Descoberta Rede de Petri (Inductive Miner)", pn_visualizer, inductive_miner)
        
    elif mining_approach == "Rede de Petri (Heuristics Miner)":
        plot_process_mining_viz(filtered_log, "Descoberta Rede de Petri (Heuristics Miner)", pn_visualizer, heuristics_miner)

# --- 6. P√ÅGINAS ADICIONAIS ---

def rl_page():
    st.title("ü§ñ Reinforcement Learning e Otimiza√ß√£o")
    st.info("Esta sec√ß√£o conteria a interface para treinar e simular modelos de RL para otimiza√ß√£o de aloca√ß√£o de recursos e sequencia√ß√£o de tarefas.")
    st.image("rl_placeholder.png", caption="Placeholder de Gr√°fico de Recompensa de RL")

def settings_page():
    st.title("‚öôÔ∏è Configura√ß√µes e Gest√£o de Dados")
    st.info("Aqui seria poss√≠vel gerir os ficheiros, configurar custos/taxas de risco ou ajustar os par√¢metros da simula√ß√£o.")
    st.markdown("### EDA - Verifica√ß√£o de Qualidade dos Dados")
    
    if st.button("Executar EDA"):
        df_projects, df_tasks, df_resources, df_allocations, df_dependencies = load_data()
        if df_projects is not None:
            st.markdown("#### Distribui√ß√£o de Valores Nulos (Missing Values)")
            
            # Gr√°fico Missingno para Projetos
            fig_proj = msno.matrix(df_projects, figsize=(10, 4))
            st.pyplot(fig_proj.get_figure())
            st.markdown("---")
            
            # Gr√°fico Missingno para Tasks
            fig_tasks = msno.matrix(df_tasks, figsize=(10, 4))
            st.pyplot(fig_tasks.get_figure())
            
            st.success("Verifica√ß√£o de EDA conclu√≠da. A falta de barras escuras confirma a aus√™ncia de valores nulos nos campos essenciais.")


# --- 7. FLUXO PRINCIPAL DA APP ---

if __name__ == '__main__':
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
        st.session_state.current_page = "Login"
    
    # Estilos CSS
    st.markdown(
        """
        <style>
        [data-testid="stAppViewContainer"] > .main {
            display: flex; flex-direction: column; justify-content: center; align-items: center;
        }
        </style>
        """, unsafe_allow_html=True)
        
    if not st.session_state.authenticated:
        st.markdown(
        """
        <style>
        [data-testid="stAppViewContainer"] > .main {
            display: flex; flex-direction: column; justify-content: center; align-items: center;
        }
        </style>
        """, unsafe_allow_html=True)
        login_page()
    else:
        with st.sidebar:
            st.markdown(f"### üë§ {st.session_state.get('user_name', 'Admin')}")
            st.markdown("---")
            if st.button("üè† Dashboard Geral", use_container_width=True):
                st.session_state.current_page = "Dashboard"
                st.rerun()
            if st.button("ü§ñ Reinforcement Learning", use_container_width=True):
                st.session_state.current_page = "RL"
                st.rerun()
            if st.button("‚öôÔ∏è Configura√ß√µes", use_container_width=True):
                st.session_state.current_page = "Settings"
                st.rerun()
            st.markdown("<br><br>", unsafe_allow_html=True)
            if st.button("üö™ Sair", use_container_width=True):
                st.session_state.authenticated = False
                for key in list(st.session_state.keys()):
                    if key not in ['authenticated']: del st.session_state[key]
                st.rerun()
                
        if st.session_state.current_page == "Dashboard":
            dashboard_page()
        elif st.session_state.current_page == "RL":
            rl_page()
        elif st.session_state.current_page == "Settings":
            settings_page()
